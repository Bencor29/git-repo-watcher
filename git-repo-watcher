#!/usr/bin/env bash

script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

print_seperator() {
    for i in {1..75}; do local s=$s"-"; done && echo $s
}

print_usage() {
    print_seperator;
    echo "NAME";
    echo "    git-repo-watcher -- keeps a git repository in sync with its origin";
    echo "SYNOPSIS";
    echo "    git-repo-watcher -d <directory> [-h <hooks-file>] [-i <interval>]";
    echo "DESCRIPTION";
    echo "    The following options are available:";
    echo "    -i    Interval";
    echo "    -c    Hooks-File";
    print_seperator;
    exit 1;
}

while getopts ":d:i:c:" opt; do
    case "${opt}" in
        d)
            git_repository_dir=${OPTARG};
            ;;
        h)
            hooks_file=${OPTARG};
            ;;
        i)
            interval_in_seconds=${OPTARG};
            ;;
        *)
            print_usage;
            ;;
    esac
done
shift $((OPTIND-1))

if [[ -z "${git_repository_dir}" ]]; then
    print_usage;
fi

if [[ ! -d "${git_repository_dir}/.git" ]]; then
    echo "Git repository not found: '$git_repository_dir/.git'";
    exit 1;
fi

if [[ -z "${hooks_file}" ]]; then
    source "$script_dir""/git-repo-watcher-hooks";
else
    if [[ -f "${hooks_file}" ]]; then
        source ${hooks_file}
    else
        echo "Hooks file not found: '$hooks_file'";
        exit 1;
    fi
fi

if [[ -z "$interval_in_seconds" ]]; then
    interval_in_seconds=10
fi

pull() {
    print_seperator
    echo "[INFO] $(date) - pulling from $upstream"
    git pull
    exit_code=$?

    if [ $exit_code -eq 1 ]; then
        pull_failed "$1" "$2"
    else
        commit_message=$(git log -1 --pretty=oneline)
        change_pulled "$1" "$2" "$commit_message"
    fi
    print_seperator
}

while [[ true ]]; do

    cd "$git_repository_dir"

    if [[ -f ".git/index.lock" ]]; then
        echo '[ERROR] Git Repository is locked'\
            ', waiting to unlock';
        sleep 2
        continue
    fi

    git fetch

    branch_temp=$(\
        git branch \
        | sed -n -e 's/^\* \(.*\)/\1/p' \
        | sed -e "s/^origin\///"\
    )

    if [[ -z $branch_temp ]]; then
        echo '[ERROR] Unable to get branch';
        exit 1
    fi

    repo_name=$(basename `git rev-parse --show-toplevel`)

    if [[ ! -z $branch ]] && [[ $branch != $branch_temp ]]; then
        branch_changed "$repo_name" "$branch_temp" "$branch"
    fi

    branch="$branch_temp"

    upstream="$(\
        git rev-parse --abbrev-ref \
        --symbolic-full-name @{u} 2>/dev/null\
    )"

    # upstream was not configured
    if [[ -z "$upstream" ]]; then
        echo '[ERROR] Upstream is not set';
        upstream_not_set "$repo_name" "$branch"
        sleep $interval_in_seconds
        continue
    fi

    git_local=$(git rev-parse @)
    git_remote=$(git rev-parse "$upstream")
    git_base=$(git merge-base @ "$upstream")

    if [[ -z $started ]]; then
        started=true;
        startup "$repo_name" "$branch";
    fi

    if [[ $git_local = $git_remote ]]; then
        no_changes "$repo_name" "$branch"
    elif [[ $git_local = $git_base ]]; then
        pull "$repo_name" "$branch"
    elif [[ $git_remote = $git_base ]]; then
        local_change "$repo_name" "$branch"
    else
        diverged "$repo_name" "$branch"
    fi

    sleep $interval_in_seconds
done
