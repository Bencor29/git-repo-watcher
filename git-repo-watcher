#!/bin/bash

# -------------------------------------------------------------------- #

REPO_NAME="Git Repo Watcher"
DIR_TO_SYNC_IN="../keep-it-synced"
BRANCH_TO_SYNC="master"
UPSTREAM="origin/$BRANCH_TO_SYNC"
LOOP_INTERVAL_IN_SECONDS=3

# -------------------------------------------------------------------- #

USER_NAME=$(whoami)
SCRIPT_NAME=`basename "$0"`
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
LOG_FILE="$SCRIPT_DIR""/""$SCRIPT_NAME"".log"

# -------------------------------------------------------------------- #

if [ ! -d "$DIR_TO_SYNC_IN" ] || [ ! -x "$DIR_TO_SYNC_IN" ]; then
    echo "Can not access directory: '$DIR_TO_SYNC_IN'"
    exit 1
fi

# -------------------------------------------------------------------- #

cl-separator() {
    for i in {1..75}; do
        SEP=$SEP"-"
    done && echo $SEP && SEP=""
}

# -------------------------------------------------------------------- #

if [ "$#" -eq 0 ]; then

cl-separator
cat <<EOF
Usage: $0 [option]

    start    - Start as daemon.
             - Only one instance is possible.
    stop     - Stop the daemon.
    status   - Check if the script is already running.
    nodaemon - Start without daemonizing.
EOF
cl-separator

exit 1
fi

# -------------------------------------------------------------------- #

START=false
STOP=false
STATUS=false
DAEMON=true

until [ -z "$1" ]; do
    if   ([ "$1" == "start"    ]); then
        START=true
    elif ([ "$1" == "stop"     ]); then
        STOP=true
    elif ([ "$1" == "status"   ]); then
        STATUS=true
    elif ([ "$1" == "nodaemon" ]); then
        DAEMON=false
    fi
    shift
done

# -------------------------------------------------------------------- #

pull() {
    cl-separator
    echo "$(date) - pulling from $UPSTREAM"
    cl-separator

    git pull origin $BRANCH_TO_SYNC

    COMMIT_MESSAGE=$(git log -1 --pretty=%B)
    ENVIRONMENT="[$USER_NAME | $REPO_NAME | $BRANCH_TO_SYNC | '$COMMIT_MESSAGE']"

    RETURN_CODE=$?
    if [ $RETURN_CODE -eq 1 ]; then
        ERROR_MSG="$ENVIRONMENT Can not pull -> Exiting"
        echo "$ERROR_MSG"
        exit 1
    fi

    MSG="$ENVIRONMENT Successfully pulled!"
    echo "$MSG"
}

# -------------------------------------------------------------------- #

watch-git-repo() {
    echo "$(date) - Starting to watch ($UPSTREAM)"
    cl-separator

    cd "$DIR_TO_SYNC_IN"
    while [[ true ]]; do
        git fetch

        GIT_LOCAL=$(git rev-parse HEAD)
        GIT_REMOTE=$(git rev-parse "$UPSTREAM")
        GIT_BASE=$(git merge-base HEAD "$UPSTREAM")

        ENVIRONMENT="[$USER_NAME | $REPO_NAME | $BRANCH_TO_SYNC]"

        if [ $GIT_LOCAL = $GIT_REMOTE ]; then
            : # nothing to pull
        elif [ $GIT_LOCAL = $GIT_BASE ]; then
            pull
        elif [ $GIT_REMOTE = $GIT_BASE ]; then
            cl-separator
            ERROR_MSG="$ENVIRONMENT Files changed locally --> Exiting"
            echo "$ERROR_MSG"
            cl-separator
            exit 1
        else
            cl-separator
            ERROR_MSG="$ENVIRONMENT Diverged --> Exiting"
            echo "$ERROR_MSG"
            cl-separator
            exit 1
        fi

        sleep $LOOP_INTERVAL_IN_SECONDS
    done
}

if [ "$STATUS" = true ] || ([ "$START" = false ] && [ "$STOP" = false ]); then
    cl-separator
    ps aux | grep "$SCRIPT_NAME start" | grep -v "grep $SCRIPT_NAME" | \
        grep -v " $$ "
    RETURN_CODE=$?
    if [ $RETURN_CODE -eq 0 ];then
        echo "--> Already running"
    else
        echo "Not running"
    fi
    cl-separator
    exit 0
fi

if $STOP ; then
    cl-separator
    ps aux | grep "$SCRIPT_NAME start" | grep -v "grep $SCRIPT_NAME" | \
        grep -v " $$ "
    RETURN_CODE=$?
    if [ $RETURN_CODE -eq 0 ];then
        echo "Killing $SCRIPT_NAME"
        pkill -f "$SCRIPT_NAME start"
    else
        echo -e 'Not running'
    fi
    cl-separator
    exit 0
fi

if $START ; then
    cl-separator
    ps aux | grep "$SCRIPT_NAME start" | grep -v "grep $SCRIPT_NAME" | \
        grep -v " $$ " && cl-separator && \
        echo -e '\n↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑↑\nAlready running!\n' && exit 1

    cd "$DIR_TO_SYNC_IN"
    git config --global credential.helper 'cache --timeout=3600' # 60min
    git fetch

    RETURN_CODE=$?
    if [ $RETURN_CODE -eq 1 ];then
        echo "Wrong password -> Exiting"
        exit 1
    fi

    if $DAEMON ; then
        cl-separator
        echo "$(date) - Starting daemon"
        ( watch-git-repo )  >> "$LOG_FILE" &
        disown
    else
        watch-git-repo
    fi

    exit 0
fi

# -------------------------------------------------------------------- #
