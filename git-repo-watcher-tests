#!/usr/bin/env bash

project_dir="$PWD"
main_script="git-repo-watcher"
shunit_git="https://github.com/kward/shunit2"

# The tests use the temp folder to store the test framework
# and all generated git repositories
temp_dir="/tmp/git-repo-watcher"
stdout="$temp_dir/stdout.txt"
shunit2_dir="$temp_dir/shunit2/"

remote_repo="$temp_dir/remote"
remote_repo_clone="$temp_dir/remote-clone"
watched_clone="$temp_dir/watched-clone"

# A verbose-flag can be passed ("-v")
[[ "$1" == "-v" ]] && verbose=true && shift

# Redirecting output
if [[ "$verbose" ]]; then
    exec 3>&1
    exec 4>&2
else
    exec 3>/dev/null
    exec 4>/dev/null
fi

# Create temp directory
[[ ! -d "$temp_dir" ]] && mkdir "$temp_dir"

# Checkout shunit2 unit test framework
if [[ ! -d "$shunit2_dir" ]]; then
    git clone --depth 1 "$shunit_git" "$shunit2_dir"
fi

# Prints a seperator. It helps to make the output more readable.
printSeparator() {
    local sep="$1"
    [[ -z "$sep" ]] && sep="-"

    # shellcheck disable=SC2034
    for i in {1..75}; do local x=$x"$sep"; done && echo "$x"
}

# Removes created temp files and directories
cleanupTempFiles() {
    [[ -f "$stdout" ]] && rm "$stdout"
    [[ -d "$remote_repo" ]] && rm -rf "$remote_repo"
    [[ -d "$watched_clone" ]] && rm -rf "$watched_clone"
    [[ -d "$remote_repo_clone" ]] && rm -rf "$remote_repo_clone"
}

# Will be executed before each test
# https://github.com/kward/shunit2#-setupteardown
setUp() {
    cd "$project_dir" || exit 1

    # Create a fresh 'remote' git repository
    git init --bare "$remote_repo" 1>&3 2>&4
    git clone "$remote_repo" "$remote_repo_clone" 1>&3 2>&4
    pushOneFile 'README.md'
    git clone "$remote_repo" "$watched_clone" 1>&3 2>&4
}

# Will be executed after each test
tearDown() {
    cleanupTempFiles
    printSeparator
    return 0
}

# Commiting and pushing file to remote repository
#
# $1 - File name
# $2 - Commit message
pushOneFile() {
    local file="$1"
    [[ -z "$file" ]] && file='test-file'

    local message="$2"
    [[ -z "$message" ]] && message="Commit message"

    cd "$remote_repo_clone" || exit 1
    touch "$file"
    git add . 1>&3 2>&4
    git commit -m "$message" 1>&3 2>&4
    git push 1>&3 2>&4
}

printStart() {
    echo && printSeparator "#"
    echo "Testing on bash-version: '$BASH_VERSION'"
    printSeparator "#" && echo && printSeparator
}

# Start the main git-repo-watcher-script
#
# $1 - override options
startWatcher() {
    local options=" -d $watched_clone"
    [[ -n "$1" ]] && options="$1"

    # A short interval is used to guarantee multiple iterations
    options="$options -i 0.1" # 0.1 seconds
    eval "$project_dir/$main_script $options" &>$stdout &
    watcher_pid=$!
}

collectOutput() {
    # We wait one second to collect stdout of multiple
    # iterations of the main watch loop.
    sleep 1

    # Killing the watcher script
    kill "$watcher_pid" 2>/dev/null

    # Reading the logfile
    result=$(cat "$stdout")

    [[ "$verbose" ]] && echo "$result"
}

createNewBranch() {
    cd "$remote_repo_clone" || exit 1
    git checkout -b "$1" 1>&3 2>&4
    git push --set-upstream origin "$1" 1>&3 2>&4
}

# -------------------------------------------------------------------- #

testHelpScreen() {
    startWatcher " " # start without options
    collectOutput

    assertContains "$result" "SYNOPSIS"
}

# -------------------------------------------------------------------- #

testNewCommitBeforeStart() {
    pushOneFile
    startWatcher
    collectOutput

    assertContains "$result" "1 file changed"
    assertContains "$result" "Fast-forward"
}

# -------------------------------------------------------------------- #

testNewCommitAfterStart() {
    startWatcher
    pushOneFile
    collectOutput

    assertContains "$result" "1 file changed"
    assertContains "$result" "Fast-forward"
}

# -------------------------------------------------------------------- #

testNothingChangedHook() {
    startWatcher
    collectOutput

    assertContains "$result" "Nothing changed"
    assertNotContains "$result" "Fast-forward"
}

# -------------------------------------------------------------------- #

testStartupHook() {
    startWatcher
    collectOutput

    assertContains "$result" "Watch started"
}

# -------------------------------------------------------------------- #

testBranchChangedHook() {
    local branch="new_branch"
    createNewBranch "$branch"

    startWatcher

    sleep 0.5
    cd "$watched_clone" || exit 1
    git checkout -t "origin/$branch" 1>&3 2>&4

    collectOutput

    assertContains "$result" "Branch changed"
    assertContains "$result" "$branch"
}

# -------------------------------------------------------------------- #

testNoUpstreamHook() {
    startWatcher

    sleep 0.5
    cd "$watched_clone" || exit 1
    git checkout -b "new_branch" 1>&3 2>&4

    collectOutput

    assertContains "$result" "Upstream not set"
}

# -------------------------------------------------------------------- #

testPulledHook() {
    pushOneFile
    startWatcher
    collectOutput

    assertContains "$result" "Changes pulled"
}

# -------------------------------------------------------------------- #

testRelativePath() {
    pushOneFile

    # Use a relative path for the git directory
    cd "$temp_dir" || exit 1
    startWatcher "-d $(basename "$watched_clone")"

    collectOutput

    assertNotContains "$result" "No such file or directory"
    assertContains "$result" "Changes pulled"
}

# -------------------------------------------------------------------- #

printStart

# shellcheck source=/tmp/git-repo-watcher/shunit2
. $shunit2_dir/shunit2

# -------------------------------------------------------------------- #
